import fs from "fs";
import { glob } from "glob";

const results = new Set();

const regexList = [
  />\s*([^<>{}\n]{2,})\s*</g,                        // 1. –¢–µ–∫—Å—Ç –º–µ–∂–¥—É —Ç–µ–≥–∞–º–∏: <div>–ü—Ä–∏–≤–µ—Ç</div>
  /{t\(["'`](.+?)["'`]\)}/g,                         // 2. –ü–µ—Ä–µ–≤–æ–¥—ã: {t("–ü—Ä–∏–≤–µ—Ç")}
  /["'`]([–ê-–Ø–∞-—è—ë–ÅA-Za-z0-9\s,.:;!?%()@\-‚Äì‚Äî]+)["'`]/g, // 3. –ü—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏: "–ö–æ–Ω—Ç–∞–∫—Ç", '–¢–µ–∫—Å—Ç', `–®–∞–ø–∫–∞`
  /{\s*["'`]([^{}]+?)["'`]\s*}/g,                    // 4. JSX —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö: {"–¢–µ—Å—Ç"}
  /t\(\s*`([^`]+)`\s*\)/g,                           // 5. –®–∞–±–ª–æ–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã: t(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å`)
  />\s*{?\s*["'`](.+?)["'`]\s*}?<\/\w+>/g,           // 6. –ì–∏–±—Ä–∏–¥—ã —Ç–∏–ø–∞: <h1>{"–ü—Ä–∏–≤–µ—Ç"}</h1>
  />\s*{(.+?)\s*}\s*</g,                              // 7. –í—Å–µ –º–µ–∂–¥—É > { ... } < (–Ω–∞ –≤—Å—è–∫–∏–π)
  /{([^}]+)}/g                                       // 8. JSX –≤—ã—Ä–∞–∂–µ–Ω–∏—è (–≤ —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö)
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
const isValidText = (text) => {
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã Tailwind CSS
  const tailwindClassRegex = /\b(?:absolute|top|left|min-h-full|w-full|flex|justify-center|items-center|bg|text|font|gap|py|px|transition|hover|rounded|max-w|mb|mx|bg-opacity|text-center)\b/;

  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è —á–∞—Å—Ç—å—é –∫–æ–¥–∞ –∏–ª–∏ –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π
  return (
    text &&
    text.length > 1 &&
    !/^\d+$/.test(text) &&        // –ù–µ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    !text.includes("=") &&        // –ù–µ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏—è —Å –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ–º
    !text.startsWith("<") &&      // –ù–µ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º HTML —Ç–µ–≥–∏
    !text.includes("{") &&        // –ù–µ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º JS –≤—ã—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–∫–æ–±–∫–∞—Ö
    !text.includes("=>") &&       // –ù–µ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    !text.startsWith("function") &&  // –ù–µ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
    !text.includes("import") &&   // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã
    !text.includes("from") &&     // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ from
    !text.includes("component") && // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    !text.includes("return") &&   // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º return
    !text.match(/[\(\)\{\}\[\]\.\,\;]/) && // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    !tailwindClassRegex.test(text) // –ò—Å–∫–ª—é—á–∞–µ–º –∫–ª–∞—Å—Å—ã Tailwind CSS
  );
};

glob("src/**/*.{js,jsx,ts,tsx}").then((files) => {
  console.log("üîç –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:", files.length);
  for (const file of files) {
    const content = fs.readFileSync(file, "utf8");

    for (const regex of regexList) {
      let match;
      while ((match = regex.exec(content))) {
        const text = match[1]?.trim();
        if (isValidText(text)) {
          results.add(text);
        }
      }
    }
  }

  const translations = {};
  [...results].forEach((t) => (translations[t] = ""));

  fs.writeFileSync("translation.ru.json", JSON.stringify(translations, null, 2));
  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${results.size} —Å—Ç—Ä–æ–∫. –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ translation.ru.json`);
});
